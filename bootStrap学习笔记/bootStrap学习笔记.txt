                                           一、bootStrap的使用
1.在使用bootStrap之前必须导入jquery，具体使用：
	将下载好的jquery放在js中
2.在使用bootStrap的时候，首先在<head></head>中导入头文件：
	
<link rel="stylesheet" href="resources/BootStrap/css/bootstrap.min.css">
<link rel="stylesheet"
	href="resources/BootStrap/css/bootstrap-theme.min.css">
<script src="resources/BootStrap/js/jquery-3.3.1.min.js"></script>
<script src="resources/BootStrap/js/bootstrap.min.js"></script>
	注：注意路径的使用,在以后的html使用当中，在<html>标签中加入lang="zh-CN"，即<html lang="zh-CN">
3.具体用法如下：
	eg:
		<button type="submit" class="btn btn-success">Helloword</button>
		<button type="button" class="btn btn-default btn-sm btn-success">（小按钮）Small button</button>
                                           二、栅格的使用
1.栅格每一行总共有12列，若放在容器中，则将栅格放在<div class="container"></div>中，
这种属于固定布局，还有流式布局，即<div class="container-fluid"></div>
	eg:
	<1>.这种属于12列，放在固定容器中
		<div class="container">
		<div class="row">
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
			<div class="col-md-1">.col-md-1</div>
		</div>
	<1>.这种属于6+6列，放在流式容器中
		<div class="container-fluid">
		<div class="row">
			<div class="col-md-6">.col-md-6</div>
			<div class="col-md-6">.col-md-6</div>
		</div>
	</div>
2.使用col-md-offset-n来进行列偏移，其中n是偏移的格数,但是总格数也是12列
	eg:
		<div class="container bord">
		<div class="row">
			<div class="col-md-4">.col-md-4</div>
			<div class="col-md-4 col-md-offset-4">.col-md-4
				.col-md-offset-4</div>
		</div>
	</div>
3.列嵌套：也就是对列进行再分，但被嵌套的行（row）所包含的列（column）的个数不能超过12
（其实，没有要求你必须占满12列）。
	eg:
	<div class="container bord">
		<div class="row">
			<div class="col-md-8">
				Level 1: .col-sm-8
				<div class="row ">

					<div class="col-md-6">Level 2: .col-sm-6</div>
					<div class="col-md-6">Level 2: .col-sm-6</div>
				</div>
			</div>
			<div class="col-md-4">
				Level 1: .col-sm-4
				<div class="row ">
					<div class="col-sm-3">Level 2: .col-sm-3</div>
					<div class="col-sm-9">Level 2: .col-sm-9</div>
				</div>
			</div>
		</div>
	</div>
                                           三.排版
1.标题排版：
	eg:
		<h1>h1. Bootstrap heading</h1>
		<h1>h1. Bootstrap heading <small>Secondary text</small>	</h1>
		//使用samll标签来改变字体大小作为副标题使用
2.页面主体排版：
	<1>.中心内容通过添加 .lead 类可以让段落突出显示。
	eg:
		<p>Nullam quis risus eget urna mollis ornare vel eu r id nibh ultricies vehicula.</p>
		<p class="lead">Cum sociis ns mollis, est non commodo luctus, nisi erat</p>
3.内联文本元素：
	<1>.Marked text:用于高亮显示标注的文本
		eg：
		You can use the mark tag to <mark>highlight</mark> text.//此时highlight会高亮显示
	<2>.被删除的文本,对于被删除的文本使用 <del> 标签。
		eg:
		<del>This line of text is meant to be treated as deleted text.</del>
	<3>.无用文本,对于没用的文本使用 <s> 标签。
		eg:
			<s>This line of text is meant to be treated as no longer accurate.</s>
	<4>.插入文本,额外插入的文本使用 <ins> 标签
		eg:
			<ins>This line of text is meant to be treated as an addition to the document.</ins>
	<5>.带下划线的文本,为文本添加下划线，使用 <u> 标签。
		eg:
			<u>This line of text will render as underlined</u>
	<6>.小号文本,对于不需要强调的inline或block类型的文本，使用 <small> 标签包裹，
	其内的文本将被设置为父容器字体大小的 85%。	标题元素中嵌套的 <small> 元素被设置不同的
	font-size 。
	eg:
		<small>This line of text is meant to be treated as fine print.</small>
	<7>.着重,通过增加 font-weight 值强调一段文本。
		eg:
			<strong>rendered as bold text</strong>
	<8>.斜体,用斜体强调一段文本。
		eg:
			<em>rendered as italicized text</em>
4.文本的对齐方式：
	<p class="text-left">左对齐</p>
	<p class="text-center">居中对齐</p>
	<p class="text-right">右对齐</p>
	<p class="text-justify">两端对齐的.</p>
	<p class="text-nowrap">不自动换行文本.</p>
5.改变大小字体：
	<p class="text-lowercase">Lowercased text.</p>//用于将所有的字母小写
	<p class="text-uppercase">Uppercased text.</p>//用于将所有的字母大写
	<p class="text-capitalize">Capitalized text.</p>//用于将所有的字母开头大写
6.缩略语：使用<abbr></abbr>标签
	<h1>基本缩略语</h1>
	<abbr title="attribute"> attr.</abbr>//给要变为缩略语的话加双下划虚线
	<h1>首字母缩略语</h1>
	<abbr title="HyperText Markup Language" class="initialism">HTML
		is the best thing since sliced bread.</abbr>//将每个字母变为大写，并且添加双下滑虚线
7.地址，让联系信息以最接近日常使用的格式呈现。在每行结尾添加 <br> 可以保留需要的样式。
	eg:
	<1>.<address>
		<strong>Full Name</strong><br> <a href="mailto:#">first.last@example.com</a>
	</address>
	<2>.<strong>Twitter, Inc.</strong><br> 1355 Market Street, Suite 900<br>
		San Francisco, CA 94103<br> <abbr title="Phone">P:</abbr> (123)
		456-7890
	</address>
8.引用,在你的文档中引用其他来源的内容。
	<1>.默认样式的引用,将任何 HTML 元素包裹在 <blockquote> 中即可表现为引用样式。
	对于直接引用，我们建议用 <p> 标签。
		eg:<blockquote>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>
</blockquote>
	<2>.命名来源,添加 <footer> 用于标明引用来源。来源的名称可以包裹进 <cite>标签中。
	eg:方式1：
		<blockquote>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>
  <footer>Someone famous in <cite title="Source Title">Source Title</cite></footer>
</blockquote>
	eg:方式2：
	<blockquote>
		Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer
		posuere erat a ante.
		<blockquote class="blockquote-reverse">
			<footer>Someone famous in <cite title="Source Title">Source
				Title</cite> </footer>
		</blockquote>
	</blockquote>
	eg:命名方式3：
		<h1>命名来源3：</h1>
	<blockquote>
	<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.
			Integer posuere erat a ante.</p>
			<footer class="text-right">Someone famous in <cite title="Source Title">Source
			Title</cite></footer>
	</blockquote>
9.列表
	<1>.无序列表,排列顺序无关紧要的一列元素。
	eg：
		<ul>
		<li>Lorem ipsum dolor sit amet</li>
		<li>Consectetur adipiscing elit</li>
		<li>Integer molestie lorem at massa</li>
		<li>Facilisis in pretium nisl aliquet</li>
		<li>Nulla volutpat aliquam velit
			<ul>
				<li>Consectetur adipi</li>
				<li>acilisi</li>
				<li>in pre</li>
			</ul>
		<li>Faucibus porta lacus fringilla vel</li>
		<li>Aenean sit amet erat nunc</li>
		<li>Eget porttitor lorem</li>
	</ul>
	<2>.有序列表,顺序至关重要的一组元素。
	eg:
		<ol>
		<li>Lorem ipsum dolor sit amet</li>
		<li>Consectetur adipiscing elit</li>
	</ol>
	<3>.内联列表,通过设置 display: inline-block; 并添加少量的内补（padding），
	将所有元素放置于同一行
	eg:
		<ul class="list-inline">
		<li>内联1</li>
		<li>内联2</li>
		<li>内联3</li>
	</ul>
                                           四.代码
1.内联代码，通过 <code> 标签包裹内联样式的代码片段，会对<code></code>标签包裹的代码加红显示。
	eg:
		For example, <code>&lt;section&gt;</code> should be wrapped as inline.
2.用户输入,通过 <kbd> 标签标记用户通过键盘输入的内容。
	eg:
		To switch directories, type <kbd>cd</kbd> followed by the name of the directory.<br>
To edit settings, press <kbd><kbd>ctrl</kbd> + <kbd>,</kbd></kbd>
3.代码块,多行代码可以使用 <pre> 标签。为了正确的展示代码，注意将尖括号做转义处理。
	eg:
	<pre>&lt;p&gt;Sample text here...&lt;/p&gt;</pre>
4.变量,通过 <var> 标签标记变量。
	eg:
		<var>y</var>=<var>m</var><var>x</var>+<var>b</var>//相当于y=mx+b
5.程序输出，通过 <samp> 标签来标记程序输出的内容。
	eg:
		<samp>This text is meant to be treated as sample output from a computer program.</samp>
                                           五.表格
1.基本表格：
	eg:
	<table class="table bor ">
		<tr>
			<th>#</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>User Name</th>
		</tr>
		<tr>
			<td><strong>1</strong></td>
			<td>Mark</td>
			<td>Otto</td>

			<td>@mdo</td>
		</tr>
		</table>
2.条纹状表格,通过 .table-striped 类可以给 <tbody> 之内的每一行增加斑马条纹样式。
	也就是在基本表格的基础上增加table-striped
	eg:
		<table class="table bor table-striped ">
		<tr>
			<th>#</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>User Name</th>
		</tr>
		<tr>
			<td><strong>1</strong></td>
			<td>Mark</td>
			<td>Otto</td>

			<td>@mdo</td>
		</tr>
		</td>
3.带边框的表格,添加 .table-bordered 类为表格和其中的每个单元格增加边框。
	eg:
		<table class="table bor table-bordered ">
		<tr>
			<th>#</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>User Name</th>
		</tr>
		<tr>
			<td><strong>1</strong></td>
			<td>Mark</td>
			<td>Otto</td>

			<td>@mdo</td>
		</tr>
		</td>
4.鼠标悬停,通过添加 .table-hover 类可以让 <tbody> 中的每一行对鼠标悬停状态作出响应
	eg:
		<table class="table bor table-hover ">
		<tr>
			<th>#</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>User Name</th>
		</tr>
		<tr>
			<td><strong>1</strong></td>
			<td>Mark</td>
			<td>Otto</td>

			<td>@mdo</td>
		</tr>
		</td>
5.紧缩表格,通过添加 .table-condensed 类可以让表格更加紧凑，单元格中的内补（padding）均会减半
	eg:
		<table class="table bor table-hover table-condensed">
		<tr>
			<th>#</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>User Name</th>
		</tr>
		<tr>
			<td><strong>1</strong></td>
			<td>Mark</td>
			<td>Otto</td>

			<td>@mdo</td>
		</tr>
		</td>
6.状态类,通过这些状态类可以为行或单元格设置颜色
	eg:
		Class			描述
		.active			鼠标悬停在行或单元格上时所设置的颜色
		.success		标识成功或积极的动作
		.info			标识普通的提示信息或动作
		.warning		标识警告或需要用户注意
		.danger			标识危险或潜在的带来负面影响的动作
		<tr>
		<td class="active">active——>鼠标悬停在行或单元格上时所设置的颜色</td>
		<td class="success">success——>标识成功或积极的动作</td>
		<td class="info">info——>标识普通的提示信息或动作</td>
		<td class="warning">warning——>标识警告或需要用户注意</td>
		<td class="danger">danger——>标识危险或潜在的带来负面影响的动作</td>
		</tr>
7.响应式表格,将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，
其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。一般嵌套在div中
增加响应式表格之后，会出现滚动条
	eg:
	<div class="table-responsive">
	<table class="table bor  table-condensed table-hover">
			<tr>
		<td class="active">active——>鼠标悬停在行或单元格上时所设置的颜色</td>
		<td class="success">success——>标识成功或积极的动作</td>
		<td class="info">info——>标识普通的提示信息或动作</td>
		<td class="warning">warning——>标识警告或需要用户注意</td>
		<td class="danger">danger——>标识危险或潜在的带来负面影响的动作</td>
		</tr>
		</table>
		</div>
                                           六.表单
1.表单的基本形式：
	<form>
		<div class="form-group">
			<label for="exampleInputEmail1">Email address</label> <input
				type="email" class="form-control" id="exampleInputEmail1"
				placeholder="Email">//placeholder相当于value;
		</div>
		<div class="form-group">
			 <input
				type="password" class="form-control" id="exampleInputPassword1"
				placeholder="Password" >
		</div>
		<div class="form-group">
			<label for="exampleInputFile">File input</label> <input type="file"
				id="exampleInputFile">//用于选择电脑本地的文件
			<p class="help-block">Example block-level help text here.</p>
		</div>
		<div class="checkbox">
			<label> <input type="checkbox"> Check me out
			</label>
		</div>
		<button type="submit" class="btn btn-default">Submit</button>
	</form>
2.内联表单,为 <form> 元素添加 .form-inline 类可使其内容左对齐并且表现为 inline-block 级别的控件。
只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）。
也就是说在基本表单的基础上，再加一个form-inline
	eg:
		<form class="form-inline">
		<div class="form-group">
			<label for="exampleInputEmail1">Email address</label> <input
				type="email" class="form-control" id="exampleInputEmail1"
				placeholder="Email">//placeholder相当于value;
		</div>
		<div class="form-group">
			 <input
				type="password" class="form-control" id="exampleInputPassword1"
				placeholder="Password" >
		</div>
		<div class="form-group">
			<label for="exampleInputFile">File input</label> <input type="file"
				id="exampleInputFile">//用于选择电脑本地的文件
			<p class="help-block">Example block-level help text here.</p>
		</div>
		<div class="checkbox">
			<label> <input type="checkbox"> Check me out
			</label>
		</div>
		<button type="submit" class="btn btn-default">Submit</button>
	</form>
	这种提交比较漂亮：
		<form class="form-inline">
		<div class="form-group">
			<label class="sr-only" for="exampleInputAmount">Amount (in
				dollars)</label>
			<div class="input-group">
				<div class="input-group-addon">$</div>
				<input type="text" class="form-control" id="exampleInputAmount"
					placeholder="Amount">
				<div class="input-group-addon">.00</div>
			</div>
		</div>
		<button type="submit" class="btn btn-primary">Transfer cash</button>
	</form>
3.水平排列的表单，通过为表单添加 .form-horizontal 类，并联合使用 Bootstrap 预置的栅格类，
可以将 label 标签和控件组水平并排布局。这样做将改变 .form-group 的行为，
使其表现为栅格系统中的行（row），因此就无需再额外添加 .row 了。
	eg:
		<form class="form-horizontal">
		<div class="form-group">
			<label for="inputEmail3" class="col-sm-2 control-label">Email</label>
			<div class="col-sm-10">
				<input type="email" class="form-control" id="inputEmail3"
					placeholder="Email">
			</div>
		</div>
		<div class="form-group">
			<label for="inputPassword3" class="col-sm-2 control-label">Password</label>
			<div class="col-sm-10">
				<input type="password" class="form-control" id="inputPassword3"
					placeholder="Password">
			</div>
		</div>
		<div class="form-group">
			<div class="col-sm-offset-2 col-sm-10">
				<div class="checkbox">
					<label> <input type="checkbox"> Remember me
					</label>
				</div>
			</div>
		</div>
		<div class="form-group">
			<div class="col-sm-offset-2 col-sm-10">
				<button type="submit" class="btn btn-default">Sign in</button>
			</div>
		</div>
	</form>
4.一些常见的控件：
	<1>.输入框
	eg:
		<input type="text" class="form-control" placeholder="Text input">
	<2>.文本域,支持多行文本的表单控件。可根据需要改变 rows 属性。rows表示最大输入的行数
	eg:
		<textarea class="form-control" rows="3"></textarea>//表示最多只能输入3行
	<3>.多选和单选框
		多选框：checkbox 			disabled表示禁用
		eg:
			<div class="checkbox">
		<label> <input type="checkbox" value=""> Option one is
			this and that&mdash;be sure to include why it's great
		</label>
	</div>
	<div class="checkbox disabled">
		<label> <input type="checkbox" value="" disabled="disabled">
			Option two is disabled
		</label>
	</div>
		单选框:radio
		eg:
			<div class="radio">
		<label> <input type="radio" name="optionsRadios"
			id="optionsRadios2" value="option2"> Option two can be
			something else and selecting it will deselect option one
		</label>
	</div>
	<div class="radio disabled">
		<label> <input type="radio" name="optionsRadios"
			id="optionsRadios3" value="option3" disabled> Option three is
			disabled
		</label>
	</div>
	<4>.内联单选和多选框，通过将 .checkbox-inline 或 .radio-inline 
	类应用到一系列的多选框（checkbox）或单选框（radio）控件上，可以使这些控件排列在一行。
		内联单选：.radio-inline 
		eg:
			<label class="radio-inline"> <input type="radio"
		name="inlineRadioOptions" id="inlineRadio1" value="option1"> 1
	</label>
		内联多选：.checkbox-inline
		eg:
			<label class="checkbox-inline"> <input type="checkbox"
		id="inlineCheckbox1" value="option1"> 1
	</label>
	<5>.不带label文本的Checkbox 和 radio,如果需要 <label> 内没有文字，
	输入框（input）正是你所期望的。 目前只适用于非内联的 checkbox 和 radio。 
	请记住，仍然需要为使用辅助技术的用户提供某种形式的 label（例如，使用 aria-label）。
	eg:
		<div class="checkbox-inline">
		<label> <input type="checkbox" id="blankCheckbox"
			value="option1" aria-label="...">
		</label>
	</div>
	<div class="radio-inline">
		<label> <input type="radio" name="blankRadio" id="blankRadio1"
			value="option1" aria-label="...">
		</label>
	</div>
	<6>.下拉列表（select）,注意，很多原生选择菜单 - 即在 Safari 和 Chrome 中 - 的圆角
	是无法通过修改	border-radius 属性来改变的。
	eg:
		<select class="form-control">
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>
	<7>.静态控件，也就是说无法改变的条件，也就是把<input>标签改为p标签
		eg:
			<form class="form-horizontal">
		<div class="form-group">
			<label class="col-sm-2 control-label">Email</label>
			<div class="col-sm-10">
				<p class="form-control-static">email@example.com</p>
			</div>
		</div>
		<div class="form-group">
			<label for="inputPassword" class="col-sm-2 control-label">Password</label>
			<div class="col-sm-10">
				<input type="password" class="form-control" id="inputPassword"
					placeholder="Password">
			</div>
		</div>
	</form>
	<8>.禁用状态,为输入框设置 disabled 属性可以禁止其与用户有任何交互（焦点、输入等）。
	被禁用的输入框颜色更浅，并且还添加了 not-allowed 鼠标状态。
	eg:
		<input class="form-control" id="disabledInput" type="text"
		placeholder="Disabled input here..." disabled>
	<8>.1.被禁用的 fieldset
为<fieldset> 设置 disabled 属性,可以禁用 <fieldset> 中包含的所有控件
	eg:
		<form>
		<fieldset disabled>
			<div class="form-group">
				<label for="disabledTextInput">Disabled input</label> <input
					type="text" id="disabledTextInput" class="form-control"
					placeholder="Disabled input">
			</div>
			<div class="form-group">
				<label for="disabledSelect">Disabled select menu</label> <select
					id="disabledSelect" class="form-control">
					<option>Disabled select</option>
				</select>
			</div>
			<div class="checkbox">
				<label> <input type="checkbox"> Can't check this
				</label>
			</div>
			<button type="submit" class="btn btn-primary">Submit</button>
		</fieldset>
	</form>
	<9>.只读状态,为输入框设置 readonly 属性可以禁止用户修改输入框中的内容。
	处于只读状态的输入框颜色更浅（就像被禁用的输入框一样），但是仍然保留标准的鼠标状态
	eg:
		<input class="form-control" type="text" placeholder="Readonly input here…" readonly>
	<10>.Help text,窗体控件的块级帮助文本,用于用户提示输入
		eg:
			<label class="sr-only" for="inputHelpBlock">Input with help
		text</label>
	<input type="text" id="inputHelpBlock" class="form-control"
		aria-describedby="helpBlock"> ...
	<span id="helpBlock" class="help-block">请输入较为复杂但是又相对比较好记忆的密码</span>
	<11>.校验状态,Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，
	都定义了样式。使用时，添加 .has-warning、.has-error 或 .has-success 类到这些控件的父元素即可。
	任何包含在此元素之内的 .control-label、.form-control 和 .help-block 元素
	都将接受这些校验状态的样式。
		eg:
		<div class="form-group has-success">
		<label class="control-label" for="inputSuccess1">Input with
			success</label> <input type="text" class="form-control" id="inputSuccess1"
			aria-describedby="helpBlock2"> <span id="helpBlock2"
			class="help-block">A block of help text that breaks onto a new
			line and may extend beyond one line.</span>
	</div>
	<div class="form-group has-warning">
		<label class="control-label" for="inputWarning1">Input with
			warning</label> <input type="text" class="form-control" id="inputWarning1">
	</div>
	<div class="form-group has-error">
		<label class="control-label" for="inputError1">Input with
			error</label> <input type="text" class="form-control" id="inputError1">
	</div>
	<div class="has-success">
		<div class="checkbox">
			<label> <input type="checkbox" id="checkboxSuccess"
				value="option1"> Checkbox with success
			</label>
		</div>
	</div>
	<div class="has-warning">
		<div class="checkbox">
			<label> <input type="checkbox" id="checkboxWarning"
				value="option1"> Checkbox with warning
			</label>
		</div>
	</div>
	<div class="has-error">
		<div class="checkbox">
			<label> <input type="checkbox" id="checkboxError"
				value="option1"> Checkbox with error
			</label>
		</div>
	</div>
	<11>.添加图标
		eg:
			<h1>样式1</h1>
	<div class="form-group has-success has-feedback">
		<label class="control-label" for="inputSuccess2">Input with
			success</label> <input type="text" class="form-control" id="inputSuccess2"
			aria-describedby="inputSuccess2Status"> <span
			class="glyphicon glyphicon-ok form-control-feedback"
			aria-hidden="true"></span> <span id="inputSuccess2Status"
			class="sr-only">(success)</span>
	</div>
	<div class="form-group has-warning has-feedback">
		<label class="control-label" for="inputWarning2">Input with
			warning</label> <input type="text" class="form-control" id="inputWarning2"
			aria-describedby="inputWarning2Status"> <span
			class="glyphicon glyphicon-warning-sign form-control-feedback"
			aria-hidden="true"></span> <span id="inputWarning2Status"
			class="sr-only">(warning)</span>
	</div>
	<div class="form-group has-error has-feedback">
		<label class="control-label" for="inputError2">Input with
			error</label> <input type="text" class="form-control" id="inputError2"
			aria-describedby="inputError2Status"> <span
			class="glyphicon glyphicon-remove form-control-feedback"
			aria-hidden="true"></span> <span id="inputError2Status"
			class="sr-only">(error)</span>
	</div>
	<div class="form-group has-success has-feedback">
		<label class="control-label" for="inputGroupSuccess1">Input
			group with success</label>
		<div class="input-group">
			<span class="input-group-addon">@</span> <input type="text"
				class="form-control" id="inputGroupSuccess1"
				aria-describedby="inputGroupSuccess1Status">
		</div>
		<span class="glyphicon glyphicon-ok form-control-feedback"
			aria-hidden="true"></span> <span id="inputGroupSuccess1Status"
			class="sr-only">(success)</span>
	</div>
	<h1>样式2</h1>
	<form class="form-horizontal">
		<div class="form-group has-success has-feedback">
			<label class="control-label col-sm-3" for="inputSuccess3">Input
				with success</label>
			<div class="col-sm-9">
				<input type="text" class="form-control" id="inputSuccess3"
					aria-describedby="inputSuccess3Status"> <span
					class="glyphicon glyphicon-ok form-control-feedback"
					aria-hidden="true"></span> <span id="inputSuccess3Status"
					class="sr-only">(success)</span>
			</div>
		</div>
		<div class="form-group has-success has-feedback">
			<label class="control-label col-sm-3" for="inputGroupSuccess2">Input
				group with success</label>
			<div class="col-sm-9">
				<div class="input-group">
					<span class="input-group-addon">@</span> <input type="text"
						class="form-control" id="inputGroupSuccess2"
						aria-describedby="inputGroupSuccess2Status">
				</div>
				<span class="glyphicon glyphicon-ok form-control-feedback"
					aria-hidden="true"></span> <span id="inputGroupSuccess2Status"
					class="sr-only">(success)</span>
			</div>
		</div>
	</form>
	<12>.控件尺寸,通过 .input-lg 类似的类可以为控件设置高度，通过 .col-lg-* 
	类似的类可以为控件设置宽度。
		<1>.高度尺寸,创建大一些或小一些的表单控件以匹配按钮尺寸。
			eg：
				<input class="form-control input-lg" type="text"
		placeholder=".input-lg">
	<input class="form-control" type="text" placeholder="Default input">
	<input class="form-control input-sm" type="text"
		placeholder=".input-sm">

	<select class="form-control input-lg">...
	</select>
	<select class="form-control">...
	</select>
	<select class="form-control input-sm">...
	</select>
		<2>.水平排列的表单组的尺寸,通过添加 .form-group-lg 或 .form-group-sm 类，
		为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸。
		eg:
			<form class="form-horizontal">
  <div class="form-group form-group-lg">
    <label class="col-sm-2 control-label" for="formGroupInputLarge">Large label</label>
    <div class="col-sm-10">
      <input class="form-control" type="text" id="formGroupInputLarge" placeholder="Large input">
    </div>
  </div>
  <div class="form-group form-group-sm">
    <label class="col-sm-2 control-label" for="formGroupInputSmall">Small label</label>
    <div class="col-sm-10">
      <input class="form-control" type="text" id="formGroupInputSmall" placeholder="Small input">
    </div>
  </div>
</form>
		<3>.调整列（column）尺寸,用栅格系统中的列（column）包裹输入框或其任何父元素，
		都可很容易的为其设置宽度。
			eg:
				<h1>调整列（column）尺寸</h1>
	<div class="row ">
		<div class="col-xs-3">
			<input type="text" class="form-control" placeholder=".col-xs-3">
		</div>
		<div class="col-xs-5">
			<input type="text" class="form-control" placeholder=".col-xs-5">
		</div>
		<div class="col-xs-4">
			<input type="text" class="form-control" placeholder=".col-xs-4">
		</div>
	</div>
                                           七.按钮
1.几种常见的按钮样式：
	<a class="btn btn-default" href="#" role="button">Link</a>//链接样式
	<button class="btn btn-default" type="submit">Button</button>//按钮提交样式
	<input class="btn btn-default" type="button" value="Input">//按钮样式
	<input class="btn btn-default" type="submit" value="Submit">//提交样式
2.预定义样式
	<!-- Standard button -->
<button type="button" class="btn btn-default">（默认样式）Default</button>

<!-- Provides extra visual weight and identifies the primary action in a set of buttons -->
<button type="button" class="btn btn-primary">（首选项）Primary</button>

<!-- Indicates a successful or positive action -->
<button type="button" class="btn btn-success">（成功）Success</button>

<!-- Contextual button for informational alert messages -->
<button type="button" class="btn btn-info">（一般信息）Info</button>

<!-- Indicates caution should be taken with this action -->
<button type="button" class="btn btn-warning">（警告）Warning</button>

<!-- Indicates a dangerous or potentially negative action -->
<button type="button" class="btn btn-danger">（危险）Danger</button>

<!-- Deemphasize a button by making it look like a link while maintaining button behavior -->
<button type="button" class="btn btn-link">（链接）Link</button>
3.按钮尺寸
	<p>
  <button type="button" class="btn btn-primary btn-lg">（大按钮）Large button</button>
  <button type="button" class="btn btn-default btn-lg">（大按钮）Large button</button>
</p>
<p>
  <button type="button" class="btn btn-primary">（默认尺寸）Default button</button>
  <button type="button" class="btn btn-default">（默认尺寸）Default button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-sm">（小按钮）Small button</button>
  <button type="button" class="btn btn-default btn-sm">（小按钮）Small button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-xs">（超小尺寸）Extra small button</button>
  <button type="button" class="btn btn-default btn-xs">（超小尺寸）Extra small button</button>
</p>
注：通过添加块级元素.btn-block 类可以将其拉伸至父元素100%的宽度，
	而且按钮也变为了块级（block）元素。
		eg:
			<button type="button" class="btn btn-primary btn-lg btn-block">（块级元素）Block level 
			button</button>
			<button type="button" class="btn btn-default btn-lg btn-block">（块级元素）
			Block level button</button>
4.激活状态，当按钮处于激活状态时，其表现为被按压下去（底色更深、边框夜色更深、向内投射阴影）。
对于 <button> 元素，是通过 :active 状态实现的。对于 <a> 元素，是通过 .active 类实现的。
然而，你还可以将 .active 应用到 <button> 上（包含 aria-pressed="true" 属性)），
并通过编程的方式使其处于激活状态。
	eg:
		<h1>按钮的激活状态</h1>
	<button type="button" class="btn btn-primary btn-lg active">Primary
		button</button>
	<button type="button" class="btn btn-default btn-lg active">Button</button>
	<h1>链接元素的激活状态</h1>
	<a href="#" class="btn btn-primary btn-lg active" role="button">Primary
		link</a>
	<a href="#" class="btn btn-default btn-lg active" role="button">Link</a>
5.禁用状态,通过为按钮的背景设置 opacity 属性就可以呈现出无法点击的效果。
	<h1>按钮的禁用状态</h1>
	<button type="button" class="btn btn-lg btn-primary"
		disabled="disabled">Primary button</button>
	<button type="button" class="btn btn-default btn-lg"
		disabled="disabled">Button</button>
	<h1>链接的禁用状态</h1>
	<a href="#" class="btn btn-primary btn-lg disabled" role="button">Primary
		link</a>
	<a href="#" class="btn btn-default btn-lg disabled" role="button">Link</a>
                                           八.图片
1.响应式图片，通过为图片添加 .img-responsive 类可以让图片支持响应式布局。
其实质是为图片设置了 max-width: 100%;、 height: auto; 和 display: block; 属性，
从而让图片在其父元素中更好的缩放。
如果需要让使用了 .img-responsive 类的图片水平居中，请使用 .center-block 类，不要用 .text-center。
	eg:
		<img src="..." class="img-responsive" alt="Responsive image">
2.图片形状,通过为 <img> 元素添加以下相应的类，可以让图片呈现不同的形状
	<img src="..." alt="..." class="img-rounded">
	<img src="..." alt="..." class="img-circle">
	<img src="..." alt="..." class="img-thumbnail">
                                           九.情境文本颜色
1.情境文本颜色，通过颜色来展示意图，Bootstrap 提供了一组工具类。这些类可以应用于链接，
并且在鼠标经过时颜色可以还可以加深，就像默认的链接一样。
	eg:
		<p class="text-muted">...</p>
		<p class="text-primary">...</p>
		<p class="text-success">...</p>
		<p class="text-info">...</p>
		<p class="text-warning">...</p>
		<p class="text-danger">...</p>
2.情境背景色,和情境文本颜色类一样，使用任意情境背景色类就可以设置元素的背景。
链接组件在鼠标经过时颜色会加深，就像上面所讲的情境文本颜色类一样。
	eg:
		<p class="bg-primary">bg-primary</p>
	<p class="bg-success">bg-success</p>
	<p class="bg-info">bg-info</p>
	<p class="bg-warning">bg-warning</p>
	<p class="bg-danger">bg-danger</p>
3.关闭按钮，通过使用一个象征关闭的图标，可以让模态框和警告框消失。
	<button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
4.三角符号
通过使用三角符号可以指示某个元素具有下拉菜单的功能。注意，向上弹出式菜单中的三角符号是反方向的。
	<span class="caret"></span>
5.快速浮动
通过添加一个类，可以将任意元素向左或向右浮动。!important 被用来明确 CSS 样式的优先级。
这些类还可以作为 mixin（参见 less 文档） 使用。
	css样式：
.pull-left {
	float: left !important;
}

.pull-right {
	float: right !important;
}

.element { .pull-left ();
	
}

.another-element { .pull-right ();
	将这些样式添加进去即可以实现浮动
		eg:
			<div class="pull-left">pull-left</div>
	<div class="pull-right">pull-right</div>
6.清除浮动，通过为父元素添加 .clearfix 类可以很容易地清除浮动（float）
	css:
		// Mixin itself
.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Usage as a mixin
.element {
  .clearfix();
}
	具体用法：
		<!-- Usage as a class -->
<div class="clearfix">...</div>
7.显示或隐藏内容，.show 和 .hidden 类可以强制任意元素显示或隐藏(对于屏幕阅读器也能起效)。
这些类通过 !important 来避免 CSS 样式优先级问题，就像 quick floats 一样的做法。
注意，这些类只对块级元素起作用，另外，还可以作为 mixin 使用。
	css:
		// Classes
.show {
  display: block !important;
}
.hidden {
  display: none !important;
}
.invisible_hidden {
	visibility: hidden;
}
.invisible_show {
	visibility: show;
}

// Usage as mixins
.element {
  .show();
}
.another-element {
  .hidden();
}
	具体用法：
		<div class="show">...</div>
<div class="hidden">...</div>
8.屏幕阅读器和键盘导航，.sr-only 类可以对屏幕阅读器以外的设备隐藏内容。
.sr-only 和 .sr-only-focusable 联合使用的话可以在元素有焦点的时候再次显示出来（例如，使用键盘导航的用户）。
对于遵循 可访问性的最佳实践 很有必要。这个类也可以作为 mixin 使用。
	css:
		// Usage as a mixin
.skip-navigation {
  .sr-only();
  .sr-only-focusable();
}
	具体用法：
		<a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>
9.图片替换
使用 .text-hide 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。
	css:
.heading {
  .text-hide();
}
	具体用法：
		<h1 class="text-hide">Custom heading</h1>
10.让元素居中显示：
	css：
		.center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

.element { .center-block ();
	
}
	具体用法：
		<font class="center-block">A</font><font class="center-block">B</font>
                                           十.图标
1.图标的使用方法：
	<1>.图标的可访问性:为了避免 屏幕识读设备抓取非故意的和可能产生混淆的输出内容
	（尤其是当图标纯粹作为装饰用途时），我们为这些图标设置了 aria-hidden="true" 属性。,而且一般情况下
	应用<span>标签隔离
		<span class="glyphicon glyphicon-search" aria-hidden="true"></span>
			eg:
				<button type="button" class="btn btn-default" aria-label="Left Align">
		<span class="glyphicon glyphicon-align-left" aria-hidden="true"></span>
	</button>

	<button type="button" class="btn btn-default btn-lg">
		<span class="glyphicon glyphicon-star" aria-hidden="true"></span> Star
	</button>
	<2>.alert 组件中所包含的图标是用来表示这是一条错误消息的，
	通过添加额外的 .sr-only 文本就可以让辅助设备知道这条提示所要表达的意思了。
	eg：
		<div class="alert alert-danger " role="alert">
		<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
		<span class="sr-only">Error:</span> Enter a valid email address
	</div>
                                           十一.下拉菜单	
1.下拉菜单,用于显示链接列表的可切换、有上下文的菜单。下拉菜单的 JavaScript 插件让它具有了交互性。
	注：将下拉菜单触发器和下拉菜单都包裹在 .dropdown 里，或者另一个声明了 position: relative; 的元素。
	然后加入组成菜单的 HTML 代码。
	注：<span class="caret"></span>表示的是箭头
		eg:
			<div class="dropdown">
		<button class="btn btn-default dropdown-toggle" type="button"
			id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true"
			aria-expanded="true">
			Dropdown <span class="caret"></span>
		</button>
		<ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
			<li><a href="#">Action</a></li>
			<li><a href="#">Another action</a></li>
			<li><a href="#">Something else here</a></li>
			<li role="separator" class="divider"></li>
			<li><a href="#">Separated link</a></li>
		</ul>
	</div>
2.下拉菜单的对齐
		 为 .dropdown-menu 添加 .dropdown-menu-right 类可以让菜单右对齐。
			eg:
				<ul class="dropdown-menu dropdown-menu-right" aria-labelledby="dLabel">
  ...
</ul>
3.下拉菜单的标题，在任何下拉菜单中均可通过添加标题来标明一组动作。
	具体使用方法：
		<ul class="dropdown-menu" aria-labelledby="dropdownMenu3">
  <li class="dropdown-header">Dropdown header</li>
  ...
</ul>
4.下拉菜单的分割线，为下拉菜单添加一条分割线，用于将多个链接分组。
	eg；
		<ul class="dropdown-menu" aria-labelledby="dropdownMenuDivider">
  ...
  <li role="separator" class="divider"></li>
  ...
</ul>
5.禁用菜单项
	eg:
		<ul class="dropdown-menu" aria-labelledby="dropdownMenu4">
  <li><a href="#">Regular link</a></li>
  <li class="disabled"><a href="#">Disabled link</a></li>//此项就是禁用项
  <li><a href="#">Another link</a></li>
</ul>
                                           十二.按钮组
1.基本形式
	<div class="btn-group " role="group" aria-label="...">
		<button type="button" class="btn btn-default btn-success">Left</button>
		<button type="button" class="btn btn-default">Middle</button>
		<button type="button" class="btn btn-default">Right</button>
	</div>
2.按钮工具栏，把一组 <div class="btn-group"> 组合进一个 <div class="btn-toolbar"> 
中就可以做成更复杂的组件
	eg：
		<div class="btn-toolbar" role="toolbar" aria-label="1">
		<div class="btn-group" role="group" aria-label="2">
			<button type="button" class="btn btn-default btn-success">1</button>
			<button type="button" class="btn btn-default btn-success">21</button>
		</div>
		<div class="btn-group" role="group" aria-label="3">
			<button type="button" class="btn btn-default btn-success">2</button>
		</div>
		<div class="btn-group" role="group" aria-label="4">
			<button type="button" class="btn btn-default btn-success">3</button>
		</div>
	</div>
3.尺寸,只要给 .btn-group 加上 .btn-group-* 类，就省去为按钮组中的每个按钮都赋予尺寸类了，
如果包含了多个按钮组时也适用。
	eg：
		<div class="btn-toolbar" role="toolbar" aria-label="1">
		<div class="btn-group btn-group-lg" role="group" aria-label="...">
			<button type="button" class="btn btn-default btn-success">btn-group-lg</button>
			<button type="button" class="btn btn-default btn-success">btn-group-lg1</button>
			<button type="button" class="btn btn-default btn-success">btn-group-lg2</button>
		</div>
		<div class="btn-group" role="group" aria-label="...">
			<button type="button" class="btn btn-default btn-success">default</button>
		</div>
		<div class="btn-group btn-group-sm" role="group" aria-label="...">
			<button type="button" class="btn btn-default btn-success">btn-group-sm</button>
		</div>
		<div class="btn-group btn-group-xs" role="group" aria-label="...">
			<button type="button" class="btn btn-default btn-success">btn-group-xs</button>
		</div>
	</div>
4.嵌套，想要把下拉菜单混合到一系列按钮中，只须把 .btn-group 放入另一个 .btn-group 中。
	eg:
		<div class="btn-group" role="group" aria-label="...">
		<button type="button" class="btn btn-default">1</button>
		<button type="button" class="btn btn-default">2</button>

		<div class="btn-group" role="group">
			<button type="button" class="btn btn-default dropdown-toggle"
				data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				Dropdown <span class="caret"></span>
			</button>
			<ul class="dropdown-menu">
				<li><a href="#">Dropdown link</a></li>
				<li><a href="#">Dropdown link</a></li>
			</ul>
		</div>
	</div>
5.垂直排列,让一组按钮垂直堆叠排列显示而不是水平排列。分列式按钮下拉菜单不支持这种方式
	eg:
		<div class="btn-group-vertical" role="group" aria-label="...">
		<button type="button" class="btn btn-default">1</button>
		<button type="button" class="btn btn-default">2</button>
		<div class="btn-group" role="group">
			<button type="button" class="btn btn-default dropdown-toggle"
				data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				Dropdown <span class="caret"></span>
			</button>
			<ul class="dropdown-menu">
				<li><a href="#">Dropdown link</a></li>
				<li><a href="#">Dropdown link</a></li>
			</ul>
		</div>
		<button type="button" class="btn btn-default">1</button>
		<button type="button" class="btn btn-default">2</button>

	</div>
6.两端对齐排列的按钮组,让一组按钮拉长为相同的尺寸，填满父元素的宽度。
对于按钮组中的按钮式下拉菜单也同样适用。
	eg:
		<div class="btn-group btn-group-justified" role="group"
		aria-label="...">
		<button type="button" class="btn btn-default" style="width:50%;">1</button>
		<button type="button" class="btn btn-default" style="width:50%;">2</button>
	</div>
	<div class="btn-group btn-group-justified" role="group"
		aria-label="...">
		<button type="button" class="btn btn-default">1</button>
		<button type="button" class="btn btn-default">2</button>
	</div>